使用驱动代码实现如下要求
    a.应用程序通过阻塞的io模型来读取status变量的值
    b.status是内核驱动中的一个变量,代表LED1的状态
    c.status的值随着按键按下而改变（按键中断）
例如status=0 按下按键status=1 ,再次按下按键status=0
    d.在按下按键的时候需要同时将led1的状态取反
    e.驱动中需要编写字符设备驱动
    f.驱动中需要自动创建设备节点
    g.这个驱动需要的所有设备信息放在设备树的同一个节点中

步骤:
    1.内核定义变量 status,用于存储 LED1 灯的状态
    2.key会改变 LED1 灯状态。
    3.必须使用设备树方式
    4.且应用层需要调用 read 函数读取内核按键状态。
    5.必须使用消抖 软中断 | 定时器 | 工作队列 | staklet 任务提交 都可以，你不可以直接使用延时 mdelay()
    6.必须自动创建设备节点 "/dev/key_led"

编写字符设备 "/dev/key_led"
应用层代码:

fd = open("/dev/key_led" );
while(1){
    read(fd); /*----- 阻塞,当按键按下时,会触发唤醒等待队列,解除阻塞 ---- 
    printf(status = %d\n);
}

解析：
    新增设备树节点，code 写入　
    key_led{
        compatible = "hqyj,key_led";
        interrupt-parent = <&gpiof>;
        interrupts = <9 0>;
        key1 = <&gpiof 9 0>;
        led1 = <&gpioe 10 0>;
    }